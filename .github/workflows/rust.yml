name: Rust

on:
  push:
    branches: [ main, extensions ]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  diff:
    runs-on: ubuntu-latest
    outputs:
      isRust: ${{ steps.diff.outputs.isRust }}
    steps:
    - uses: actions/checkout@v2
    - name: Detect Changes
      uses: dorny/paths-filter@v2.10.2
      id: diff
      with:
        filters: |
          isRust:
            - '!(explorer|doc|.github)/**'
            - '.github/workflows/rust.yml'
  release-check:
    name: Rust release-mode compilation nightly on ubuntu
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --tests -Z unstable-options --profile=release

  test:
    name: Test Rust ${{matrix.toolchain}} on ${{matrix.os}}
    needs: diff
    runs-on: ${{matrix.os}}-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, nightly]
        os: [ubuntu]
    steps:
      - uses: actions/checkout@v2
        if: needs.diff.outputs.isRust == 'true'
      - name: Install rust
        if: needs.diff.outputs.isRust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{matrix.toolchain}}
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
        if: needs.diff.outputs.isRust == 'true'
      - name: Test
        if: needs.diff.outputs.isRust == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  clippy:
    name: Clippy
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install minimal nightly with clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: clippy
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --tests -- -D clippy::all -D warnings -D clippy::disallowed_method

  rustfmt:
    name: rustfmt
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install minimal nightly with rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: license-check
        run: scripts/license_check.sh

  cargo-deny:
    name: cargo-deny (advisories, licenses, bans, ...)
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1

  cargo-udeps:
    name: cargo-udeps
    needs: diff
    if: needs.diff.outputs.isRust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install minimal nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Install cargo-udeps, and cache the binary
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-udeps
      - name: run cargo-udeps
        run: cargo +nightly udeps
